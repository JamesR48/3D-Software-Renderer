#pragma once

#ifndef MESH_H
#define MESH_H

#include "Triangle.h"
#include "Vector.h"
#include "upng.h"
#include "Texture.h"


// Left-handed coordinate system here (inside the monitor +Z outside -Z, o the right +X left -X, up +Y down -Y )

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Simple cube mesh example
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define N_CUBE_VERTICES	 8
// 6 cube faces, 2 triangles per face
#define N_CUBE_FACES (6*2) 

// Declare an array of vertices/points that will make a cube mesh
extern vec3_t CubeVertices[N_CUBE_VERTICES];
// Declare an array of cube triangle faces
extern TriangleFace_t CubeFaces[N_CUBE_FACES];

void Load_Cube_Mesh_Data(void);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Define a struct for dynamic size meshes
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct
{
	vec3_t* Vertices; // Dynamic array of vertices
	TriangleFace_t* Faces; // Dynamic array of faces
	upng_t* Texture;          // mesh PNG texture
	vec3_t Rotation; // x, y, z values (euler angles) of mesh's rotation
	vec3_t Scale; // x, y, z values of mesh's scale
	vec3_t Position; // x, y, z values of mesh's position
} mesh_t;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Load an OBJ file and save its data into our Mesh data structure
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Load_Mesh_OBJ_File_Data( mesh_t* Mesh, char* FileName);
void Load_Mesh_PNG_Data(mesh_t * Mesh, char * FileName);

void Load_Mesh(char* OBJFileName, char* PNGFileName, vec3_t Scale, vec3_t Pos, vec3_t Rot);

mesh_t* Get_Mesh(int Index);
int Get_Num_Meshes(void);

void Rotate_Mesh_Euler(int Index, vec3_t Rot);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Free the memory that was dynamically allocated by the program
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Free_Meshes(void);

#endif // !MESH_H
